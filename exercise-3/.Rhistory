shiny::runApp()
# Install and load the `shiny` package
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Exercise 1: Shiny basics
# Install and load the `shiny` package
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput("price", label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput("quantity", "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
strong("Cost"),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server = function(input, output){}
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
return(paste0("$", input$price * input$quantity))
})
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
colnames(mpg)
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
library(shiny)
library(ggplot2)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
runApp()
cars
mpg
View(mpg)
col(mpg)
colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
# A page header
titlePanel("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput(x_variable, "X Variable", choices = colnames(mpg)),
# Add a select input for the y variable
selectInput(y_variable, "Y Variable", choices = colnames(mpg)),
# Add a sliderInput to set the size of each point
sliderInput(size_of_point, "Size of point", value = 0, min = 0, max = 10),
# Add a selectInput that allows you to select a color from a list of choices
selectInput(color, "Color", c(Blue, Red, Green)),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
# A page header
titlePanel("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput(x_variable, "X Variable", choices = colnames(mpg)),
# Add a select input for the y variable
selectInput(y_variable, "Y Variable", choices = colnames(mpg)),
# Add a sliderInput to set the size of each point
sliderInput(size_of_point, "Size of point", value = 0, min = 0, max = 10),
# Add a selectInput that allows you to select a color from a list of choices
selectInput(color, "Color", c(Blue, Red, Green)),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
# A page header
titlePanel("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("X Variable", "X Variable", choices = colnames(mpg)),
# Add a select input for the y variable
selectInput("Y Variable", "Y Variable", choices = colnames(mpg)),
# Add a sliderInput to set the size of each point
sliderInput(size_of_point, "Size of point", value = 0, min = 0, max = 10),
# Add a selectInput that allows you to select a color from a list of choices
selectInput(color, "Color", c(Blue, Red, Green)),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
# A page header
titlePanel("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("X Variable", "X Variable", choices = colnames(mpg)),
# Add a select input for the y variable
selectInput("Y Variable", "Y Variable", choices = colnames(mpg)),
# Add a sliderInput to set the size of each point
sliderInput("Size of point", "Size of point", value = 0, min = 0, max = 10),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("Color", "Color", c(Blue, Red, Green)),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
# A page header
titlePanel("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("X Variable", "X Variable", choices = colnames(mpg)),
# Add a select input for the y variable
selectInput("Y Variable", "Y Variable", choices = colnames(mpg)),
# Add a sliderInput to set the size of each point
sliderInput("Size of point", "Size of point", value = 0, min = 0, max = 10),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("Color", "Color", c("Blue", "Red", "Green")),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
ggplot(mpg) +
geom_point(mapping = aes(x = "X Variable", y = "Y Variable"))
# Store x and y values to plot
ggplot(mpg) +
geom_point(mapping = aes(x = input$`X Variable`, y = input$`Y Variable`),
ggtitle(input$`X Variable`, "vs", input$`Y Variable`))
# Store x and y values to plot
ggplot(mpg) +
geom_point(mapping = aes(x = input$`X Variable`, y = input$`Y Variable`) +
ggtitle(input$`X Variable`, "vs", input$`Y Variable`)
# Store the title of the graph in a variable
# Create ggplot scatter
})
# Store x and y values to plot
ggplot(mpg) +
geom_point(mapping = aes(x = input$`X Variable`, y = input$`Y Variable`)) +
ggtitle(input$`X Variable`, "vs", input$`Y Variable`)
# Store the title of the graph in a variable
title <- paste0(input$`X Variable`, "vs", input$`Y Variable`)
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
output$scatter <- renderPlot({
# Store x and y values to plot
ggplot(mpg) +
geom_point(mapping = aes(x = input$`X Variable`, y = input$`Y Variable`)) +
ggtitle(title)
})
# Store the title of the graph in a variable
title <- paste0(input$`X Variable`, "vs", input$`Y Variable`)
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
setwd("~/Desktop/ch16-shiny/exercise-3")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/ch16-shiny/exercise-5')
shiny::runApp()
runApp()
# UI for scatterplot
library(shiny)
mpg
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
titlePanel("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("x_variable", "X Variable", choices = colnames(mpg)),
# Add a select input for the y variable
selectInput("y_variable", "Y Variable", choices = colnames(mpg)),
# Add a sliderInput to set the size of each point
sliderInput("size_of_point", "Size of point", value = 0, min = 0, max = 10),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color", "Color",
choices = c("Blue", "Red", "Green")),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
)
# server.R
library(dplyr)
# Read in data
source('./scripts/build_map.R')
source('./scripts/build_scatter.R')
df <- read.csv('./data/electoral_college.csv', stringsAsFactors = FALSE)
state_codes <- read.csv('./data/state_codes.csv', stringsAsFactors = FALSE)
# Join together state.codes and df
joined_data <- left_join(df, state_codes, by="state")
# Compute the electoral votes per 100K people in each state
joined_data <- joined_data %>% mutate(ratio = votes/population * 100000)
# Start shinyServer
shinyServer(function(input, output) {
# Render a plotly object that returns your map
output$map <- renderPlotly({
return(build_map(joined_data, input$mapvar))
})
})
# UI for scatterplot
library(shiny)
mpg
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
titlePanel("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("x_variable", "X Variable", choices = colnames(mpg)),
# Add a select input for the y variable
selectInput("y_variable", "Y Variable", choices = colnames(mpg)),
# Add a sliderInput to set the size of each point
sliderInput("size_of_point", "Size of point", value = 0, min = 0, max = 10),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color", "Color",
choices = c("Blue", "Red", "Green")),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
)
runApp()
mpg
mpg
# UI for scatterplot
library(shiny)
mpg
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
titlePanel("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("x_variable", "X Variable", choices = colnames(mpg)),
# Add a select input for the y variable
selectInput("y_variable", "Y Variable", choices = colnames(mpg)),
# Add a sliderInput to set the size of each point
sliderInput("size_of_point", "Size of point", value = 0, min = 0, max = 10),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color", "Color",
choices = c("Blue", "Red", "Green")),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
)
mpg
View(mpg)
# UI for scatterplot
library(shiny)
mpg
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
titlePanel("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("x_variable", "X Variable", choices = colnames(mpg)),
# Add a select input for the y variable
selectInput("y_variable", "Y Variable", choices = colnames(mpg)),
# Add a sliderInput to set the size of each point
sliderInput("size_of_point", "Size of point", value = 0, min = 0, max = 10),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color", "Color",
choices = c("Blue", "Red", "Green")),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
)
runApp()
mpg
mpg
mp
mpg
### Exercise 3 ###
library(shiny)
library(ggplot2)
# Create a shiny server that creates a scatterplot.
shinyServer(function(input, output){
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
output$scatter <- renderPlot({
title <- paste0(input$x_variable, "vs", input$y_variable)
x <- mpg[[input$x_variable]]
y <- mpg[[input$y_variable]]
# Store x and y values to plot
p <- ggplot(mpg) +
geom_point(mapping = aes(x = x, y = y),
size = input$size_of_point,
color = input$color) +
labs(x = input$x_variable, y = input$y_variable, title = title)
p
})
# Store the title of the graph in a variable
# Create ggplot scatter
}
)
# UI for scatterplot
library(shiny)
mpg
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
titlePanel("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("x_variable", "X Variable", choices = colnames(mpg)),
# Add a select input for the y variable
selectInput("y_variable", "Y Variable", choices = colnames(mpg)),
# Add a sliderInput to set the size of each point
sliderInput("size_of_point", "Size of point", value = 0, min = 0, max = 10),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color", "Color",
choices = c("Blue", "Red", "Green")),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
)
runApp()
